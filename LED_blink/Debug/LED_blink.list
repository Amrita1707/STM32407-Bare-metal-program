
LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000308  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000308  08000308  00010310  2**0
                  CONTENTS
  4 .ARM          00000000  08000308  08000308  00010310  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000308  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000308  08000308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800030c  0800030c  0001030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010310  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010310  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000010a  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000009e  00000000  00000000  0001044a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000044c  00000000  00000000  000114c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c1a  00000000  00000000  00011910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001552a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0001557c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002f0 	.word	0x080002f0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002f0 	.word	0x080002f0

080001e8 <main>:
#define GPIOx_MODER_OFFSET 		0x00U
#define GPIOD_MODER   			(GPIOD_BASEADDR + GPIOx_MODER_OFFSET)
#define GPIOx_ODR_OFFSET        0x14
#define GPIOD_ODR               (GPIOD_BASEADDR  + GPIOx_ODR_OFFSET)
int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
	 volatile uint32_t i = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
	 uint32_t * clk = (uint32_t *)RCC_AHB1ENR ;
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <main+0x5c>)
 80001f4:	60fb      	str	r3, [r7, #12]
	 * clk = 0x08;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2208      	movs	r2, #8
 80001fa:	601a      	str	r2, [r3, #0]
	 uint32_t *mode_reg = (uint32_t *)GPIOD_MODER;
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <main+0x60>)
 80001fe:	60bb      	str	r3, [r7, #8]
	 *mode_reg = 0x1000000;
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000206:	601a      	str	r2, [r3, #0]
	 uint32_t *odr_reg = (uint32_t *)GPIOD_ODR;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <main+0x64>)
 800020a:	607b      	str	r3, [r7, #4]
	 while(1)
	 {
	 *odr_reg = 0x1000;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000212:	601a      	str	r2, [r3, #0]
	 for ( i = 0; i<100000; i++);
 8000214:	2300      	movs	r3, #0
 8000216:	603b      	str	r3, [r7, #0]
 8000218:	e002      	b.n	8000220 <main+0x38>
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <main+0x68>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d9f8      	bls.n	800021a <main+0x32>
	 *odr_reg = 0x00;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
	 for ( i = 0; i<100000; i++);
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
 8000232:	e002      	b.n	800023a <main+0x52>
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	3301      	adds	r3, #1
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <main+0x68>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d9f8      	bls.n	8000234 <main+0x4c>
	 *odr_reg = 0x1000;
 8000242:	e7e3      	b.n	800020c <main+0x24>
 8000244:	40023830 	.word	0x40023830
 8000248:	40020c00 	.word	0x40020c00
 800024c:	40020c14 	.word	0x40020c14
 8000250:	0001869f 	.word	0x0001869f

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f811 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ffaf 	bl	80001e8 <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000310 	.word	0x08000310
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	4d0d      	ldr	r5, [pc, #52]	; (80002e0 <__libc_init_array+0x38>)
 80002ac:	4c0d      	ldr	r4, [pc, #52]	; (80002e4 <__libc_init_array+0x3c>)
 80002ae:	1b64      	subs	r4, r4, r5
 80002b0:	10a4      	asrs	r4, r4, #2
 80002b2:	2600      	movs	r6, #0
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	4d0b      	ldr	r5, [pc, #44]	; (80002e8 <__libc_init_array+0x40>)
 80002ba:	4c0c      	ldr	r4, [pc, #48]	; (80002ec <__libc_init_array+0x44>)
 80002bc:	f000 f818 	bl	80002f0 <_init>
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	10a4      	asrs	r4, r4, #2
 80002c4:	2600      	movs	r6, #0
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000308 	.word	0x08000308
 80002e4:	08000308 	.word	0x08000308
 80002e8:	08000308 	.word	0x08000308
 80002ec:	0800030c 	.word	0x0800030c

080002f0 <_init>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr

080002fc <_fini>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr
